// Package swagger provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package swagger

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new product
	// (POST /product)
	CreateProduct(c *gin.Context)
	// Delete a telegram bot by ID
	// (DELETE /telegram-bot)
	DeleteTelegramBot(c *gin.Context, params DeleteTelegramBotParams)
	// Create a telegram bot
	// (POST /telegram-bot)
	CreateTelegramBot(c *gin.Context)
	// Get a telegram bot by ID
	// (GET /telegram-bot/{id})
	GetTelegramBot(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// CreateProduct operation middleware
func (siw *ServerInterfaceWrapper) CreateProduct(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateProduct(c)
}

// DeleteTelegramBot operation middleware
func (siw *ServerInterfaceWrapper) DeleteTelegramBot(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteTelegramBotParams

	// ------------- Required query parameter "id" -------------

	if paramValue := c.Query("id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "id", c.Request.URL.Query(), &params.Id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteTelegramBot(c, params)
}

// CreateTelegramBot operation middleware
func (siw *ServerInterfaceWrapper) CreateTelegramBot(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTelegramBot(c)
}

// GetTelegramBot operation middleware
func (siw *ServerInterfaceWrapper) GetTelegramBot(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTelegramBot(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/product", wrapper.CreateProduct)
	router.DELETE(options.BaseURL+"/telegram-bot", wrapper.DeleteTelegramBot)
	router.POST(options.BaseURL+"/telegram-bot", wrapper.CreateTelegramBot)
	router.GET(options.BaseURL+"/telegram-bot/:id", wrapper.GetTelegramBot)
}

type CreateProductRequestObject struct {
	Body *CreateProductJSONRequestBody
}

type CreateProductResponseObject interface {
	VisitCreateProductResponse(w http.ResponseWriter) error
}

type CreateProduct201JSONResponse IDResponse

func (response CreateProduct201JSONResponse) VisitCreateProductResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTelegramBotRequestObject struct {
	Params DeleteTelegramBotParams
}

type DeleteTelegramBotResponseObject interface {
	VisitDeleteTelegramBotResponse(w http.ResponseWriter) error
}

type DeleteTelegramBot204Response struct {
}

func (response DeleteTelegramBot204Response) VisitDeleteTelegramBotResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTelegramBot404JSONResponse ErrorResponse

func (response DeleteTelegramBot404JSONResponse) VisitDeleteTelegramBotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type CreateTelegramBotRequestObject struct {
	Body *CreateTelegramBotJSONRequestBody
}

type CreateTelegramBotResponseObject interface {
	VisitCreateTelegramBotResponse(w http.ResponseWriter) error
}

type CreateTelegramBot201JSONResponse IDResponse

func (response CreateTelegramBot201JSONResponse) VisitCreateTelegramBotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GetTelegramBotRequestObject struct {
	Id string `json:"id"`
}

type GetTelegramBotResponseObject interface {
	VisitGetTelegramBotResponse(w http.ResponseWriter) error
}

type GetTelegramBot200JSONResponse TelegramBot

func (response GetTelegramBot200JSONResponse) VisitGetTelegramBotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTelegramBot404JSONResponse ErrorResponse

func (response GetTelegramBot404JSONResponse) VisitGetTelegramBotResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a new product
	// (POST /product)
	CreateProduct(ctx context.Context, request CreateProductRequestObject) (CreateProductResponseObject, error)
	// Delete a telegram bot by ID
	// (DELETE /telegram-bot)
	DeleteTelegramBot(ctx context.Context, request DeleteTelegramBotRequestObject) (DeleteTelegramBotResponseObject, error)
	// Create a telegram bot
	// (POST /telegram-bot)
	CreateTelegramBot(ctx context.Context, request CreateTelegramBotRequestObject) (CreateTelegramBotResponseObject, error)
	// Get a telegram bot by ID
	// (GET /telegram-bot/{id})
	GetTelegramBot(ctx context.Context, request GetTelegramBotRequestObject) (GetTelegramBotResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// CreateProduct operation middleware
func (sh *strictHandler) CreateProduct(ctx *gin.Context) {
	var request CreateProductRequestObject

	var body CreateProductJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateProduct(ctx, request.(CreateProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateProductResponseObject); ok {
		if err := validResponse.VisitCreateProductResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTelegramBot operation middleware
func (sh *strictHandler) DeleteTelegramBot(ctx *gin.Context, params DeleteTelegramBotParams) {
	var request DeleteTelegramBotRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTelegramBot(ctx, request.(DeleteTelegramBotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTelegramBot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteTelegramBotResponseObject); ok {
		if err := validResponse.VisitDeleteTelegramBotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTelegramBot operation middleware
func (sh *strictHandler) CreateTelegramBot(ctx *gin.Context) {
	var request CreateTelegramBotRequestObject

	var body CreateTelegramBotJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTelegramBot(ctx, request.(CreateTelegramBotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTelegramBot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTelegramBotResponseObject); ok {
		if err := validResponse.VisitCreateTelegramBotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTelegramBot operation middleware
func (sh *strictHandler) GetTelegramBot(ctx *gin.Context, id string) {
	var request GetTelegramBotRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTelegramBot(ctx, request.(GetTelegramBotRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTelegramBot")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTelegramBotResponseObject); ok {
		if err := validResponse.VisitGetTelegramBotResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RV0WvbPhD+V8T9fo9enW5lFL+tzSiBsZXStxGGYl8cdbakns7ZQvH/PiQ7rp04Swcp",
	"bC8hnHR3333fffITpKa0RqNmB8kTuHSFpQx/PxIZukNnjXboA5aMRWKF4bhE52QeDvCnLG2BkMAdOlNR",
	"ikIbFktT6Qwi4I31Z45J6RzquouYxQOmDHUEs+nhRirzvy8ocksmq1K+w8cKHR8qtDRUSoYElOb3FxAB",
	"ocy+6GIDCVOFXV2lGXMkX1jLEkcwRGBJpTgouiyM5OeZdVUufI3at3msFGEGydem4DZ9PjLKPRaYkyyv",
	"zMgcGbqUlGVl9CiqUcIiUKXM8VtFxejpwRnZfEf9QgV6sA+qcBT9yWGOMN/c3mfeX1d6aUIhxWGn27US",
	"H25nEMEayQXocH42OZv41saillZBAu9CKAIreRWGjW2THGgwDR2eDOnHn2WQwDWhZGx7QAMWHV+ZbOMv",
	"p0Yz6pAnrS1UGjLjB9ew19jV//ufcAkJ/Bc/+zluzRzvGCNMOZChm5GNSAMg6NPmfRF4bCwaJns7OT8Z",
	"vp77R7A1DGVBSleVpaRNFxVSaPwhbEcfy9x5nbeRuc+Kud3LN4vGTxkWyLgvxjTE++bzWpIskZF83Z31",
	"hdlUmKXgFYptC7Ewgca2hV8nSOCxQtrAdn29Q3f5jXpc7a7wfI/7iz0nwWcjrlsx6ggumisnkWf4IRhR",
	"6L4/+/PLPxSs4VbIIVOLjZhNe7oNlJr7J/Y3rhkK9RrOGXnQjsz/7xiHh6gPKLBrn/hJZbXHleOILjfI",
	"J3EPIZPCdecf/6Ce0D6T11iQo85oXfE3mvMG+Q+dGfKR1uPKfjKpLFbeuhGETzmsmG0Sx8X2ILmcXE5i",
	"aVW8Pod6Xv8KAAD//5flhOSJCgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
